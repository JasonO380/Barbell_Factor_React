{"version":3,"sources":["shared/components/navigation/menu-dropdown-button.js","shared/UIElements/Logo.js","shared/components/navigation/MainHeader.js","shared/components/navigation/MainNav.js","home/components/pageInfo.js","home/components/infoItems.js","home/components/servicesoutput.js","home/components/serviceItems.js","home/components/services.js","home/components/training-profile-list.js","home/components/trainingProfileOutput.js","home/components/about-me.js","home/components/greeting-info.js","home/components/greeting.js","home/pages/HomePage.js","dashboard/components/macro-items.js","dashboard/components/update-macros.js","dashboard/components/dashboard-output.js","shared/util/validators.js","dashboard/components/macros-form.js","dashboard/components/dashboard.js","dashboard/components/month-select-options.js","shared/UIElements/drop-down-select.js","shared/components/LineChart.js","dashboard/components/get-macros.js","dashboard/components/workout-data.js","dashboard/components/update-workouts.js","dashboard/components/get-all-workouts.js","dashboard/components/get-all-workouts-testarea.js","dashboard/components/workout-form.js","dashboard/components/workout-data-output.js","home/pages/workout-tracker.js","AnimatedRoutes.js","shared/footer/footer-info.js","shared/footer/footer-card.js","shared/footer/footer.js","MainLayoutRoutes.js","App.js","reportWebVitals.js","index.js","barbellfactor.jpeg","profilepic.jpeg"],"names":["DropdownMenu","react_default","a","createElement","Dropdown","Toggle","variant","id","Menu","Item","href","Logo","props","className","react_router_dom","to","src","barbellfactor","style","width","MainHeader","children","MainNav","components_navigation_MainHeader","shared_UIElements_Logo","navigation_menu_dropdown_button","PageInfo","infoTitle","infoDescription","infoItems","title","description","ServicesOutPut","serviceInfo","createService","servicesoutput","Services","Fragment","map","trainingInfo","methods","TrainingList","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","onClick","console","log","index_esm","padding","margin","height","opacity","transition","items","AboutMe","profilepic","alt","info","components_trainingProfileOutput","greetingInfo","Greeting","about_me","createPageInfo","components_pageInfo","HomePage","framer_motion","div","initial","animate","exit","x","window","innerWidth","duration","greeting","components_services","dayObj","Date","year","getFullYear","month","getMonth","macroData","getDay","day","dayOfWeek","carbs","protein","fats","UpdateMacros","macroID","macro","foundMacros","macros","navigate","useNavigate","_useState3","_useState4","isValid","setIsValid","_useState5","_useState6","setFormIsValid","_useState7","_useState8","updateData","setUpdateData","useEffect","updateMacros","selectedMacrosID","push","getMacrosToUpdate","changeHandler","event","target","value","macroName","name","uuidv4","preValue","_objectSpread2","objectSpread","defineProperty","class","required","element","type","label","errorText","placeholder","onChange","length","preventDefault","ChartJS","defaults","color","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","DashboardOutput","monthName","toLocaleString","datasets","macroGraphInfo","setMacroGraphInfo","chartOptions","setChartOptions","macrosForGraph","items2","macroProps","labels","data","backgroundColor","borderColor","lineTension","radius","maintainAspectRatio","responsive","plugins","legend","position","display","text","font","size","dist","options","components_update_macros","MacrosForm","formIsValid","setMacroData","uid","macroDateEntry","Math","floor","random","getDate","onAdd","in","Dashboard","setMacros","macrosEnteredForDay","setMacrosForDayEntered","components_dashboard_output","components_macros_form","newMacros","prevMacros","concat","toConsumableArray","months","DropDownSelect","isLoaded","GetMacros","isSelectedMonthLoaded","setIsSelectedMonthLoaded","selectedMonth","setSelectedMonth","macroInfo","setMacroInfo","filter","handleSelect","choice","foundMonth","UIElements_drop_down_select","session","movement","rounds","reps","weight","UpdateWorkouts","workoutToUpdate","updateInfo","setUpdateInfo","handleChange","inputName","inputValue","prevValue","workoutitems","GetAllWorkoutData","updateWorkout","setUpdateWorkout","isUpdateMode","setIsUpdateMode","_useState9","_useState10","loggedMonth","setLoggedMonth","loggedSession","workoutToUpdateArray","getWorkoutToUpdateId","selectedWorkoutToUpdate","workouts","updateModeHandler","generateMovementObjects","generateDaySession","activities","sessions","isMonthFound","find","lsession","isDayFound","days","monthDays","doesDayExist","components_update_workouts","fDay","foundDay","foundActivities","onUpdate","TestWorkoutArea","WorkoutForm","user","workoutData","setWorkoutData","workoutEntryDate","workoutItems","WorkoutOutput","updateHandler","Workout","sessionForDayIsLoaded","setSessionForDayIsLoaded","addWorkout","newWorkoutData","prevWorkoutData","components_workout_form","components_workout_data_output","AnimatedRoutes","location","useLocation","react_router","key","pathname","path","home_pages_HomePage","components_dashboard","pages_workout_tracker","components_get_all_workouts","get_all_workouts_testarea","components_get_macros","footerInfo","copyright","tech","FooterCard","fa_index_esm","createFooter","footer_footer_card","Footer","MainLayoutRoutes","components_navigation_MainNav","src_AnimatedRoutes","footer_footer","App","basename","src_MainLayoutRoutes","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","src_App","document","getElementById","createRoot","module","exports","p"],"mappings":"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","file":"static/js/main.f69ae1ea.chunk.js","sourcesContent":["import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport \"./menu-dropdown-button.css\";\n\nconst DropdownMenu = () => {\n    return (\n        <Dropdown>\n            <Dropdown.Toggle variant=\"danger\" id=\"dropdown_button\">\n            Menu\n            </Dropdown.Toggle>\n    \n            <Dropdown.Menu>\n                <Dropdown.Item href=\"/\">Home</Dropdown.Item>\n                <Dropdown.Item href=\"/dashboard\">Macro logger</Dropdown.Item>\n                <Dropdown.Item href=\"macrosgraph\">Macro viewer</Dropdown.Item>\n                <Dropdown.Item href=\"workoutlog\">Workout logger</Dropdown.Item>\n                <Dropdown.Item href=\"workoutview\">Workout viewer</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default DropdownMenu;\n\n{/* <Route path=\"/\" element={<HomePage />} />\n                        <Route path=\"/dashboard\" element={<Dashboard />} />\n                        <Route path=\"/workoutlog\" element={<Workout />} />\n                        <Route path=\"/workoutview\" element={<GetAllWorkoutData />} />\n                        <Route path=\"/workouttest\" element={<TestWorkoutArea />} />\n                        <Route path=\"/dashboard/:mid\" element={<UpdateMacros />} />\n                        <Route path=\"/macrosgraph\" element={<GetMacros />} /> */}","import React from \"react\";\nimport barbellfactor from \"../../barbellfactor.jpeg\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./Logo.css\";\n\n\n\nconst Logo = (props) => {\n    return (\n        <div className=\"logo\" >\n            <NavLink className=\"logo\" to=\"/\">\n                <img \n                src={barbellfactor}\n                style={{ width:props.width }} />\n            </NavLink>\n        </div>\n        \n    );\n};\n\nexport default Logo;","import React from \"react\";\n\nimport \"./MainHeader.css\";\n\nconst MainHeader = (props) => {\n    return (\n        <header className=\"main-header\"> {props.children} </header>\n    );\n};\n\nexport default MainHeader;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport DropdownMenu from \"./menu-dropdown-button\";\nimport Logo from \"../../UIElements/Logo\";\nimport MainHeader from \"./MainHeader\";\nimport NavLinks from \"./NavLinks\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./MainNav.css\";\n\nconst MainNav = (props) => {\n    return (\n        <MainHeader>\n            <Logo />\n            <DropdownMenu />\n        </MainHeader>\n\n    //     <MainHeader>\n    //         <button className=\"main-navigation__menu-btn\" >\n    //             <span />\n    //             <span />\n    //             <span />\n    //         </button>\n    //         <Logo />\n    //         <nav className=\"main-navigation__header-nav\">\n    //             <NavLinks />\n    //         </nav>\n    // </MainHeader>\n    )\n};\n\nexport default MainNav;","import React from \"react\";\nimport Card from \"../../shared/UIElements/Card\";\n\nimport \"./pageInfo.css\";\n\n\n\n\nconst PageInfo = (props) => {\n    return (          \n            <div className=\"pageinfo_card\">\n                <header className=\"pageInfo-header\">\n                <h2>{props.infoTitle}</h2>\n                </header>\n                <p>{props.infoDescription}</p>\n            </div>\n        )\n};\n\nexport default PageInfo;\n\n\n","const infoItems = [\n    {\n        title: \"Dashboard\",\n        description: \"The dashboard is provided to log workouts and diet info\"\n    },\n    {\n        title: \"TheBOARD\",\n        description: \"The BOARD is a spot for athletes to post their top fitness goals accomplished during their fitness journey\"\n    },\n    {\n        title: \"Register\",\n        description: \"Register in order to log in and start tracking your progress\"\n    }\n]\n\nexport default infoItems;","import React from \"react\";\nimport Card from \"../../shared/UIElements/Card\";\nimport \"./serviceoutput.css\";\n\nconst ServicesOutPut = (props) => {\n    return(\n        <div className=\"services_wrapper\">\n            <h3 className=\"services_heading\">{props.title}</h3>\n            <p className=\"services_description\">{props.description}</p>\n        </div>\n    )\n};\n\nexport default ServicesOutPut;","const serviceInfo = [\n    {\n        title: \"Personal training\",\n        description:\"In person one on one training tailored to specific needs of the athlete\"\n    },\n    {\n        title:\"Online training\",\n        description: \"For those who have a home gym and are looking for a coach to reach the next level\"\n    },\n    {\n        title:\"Programming\",\n        description:\"If you are looking just for programming to follow I can provide workout cycles to fit your goals\"\n    }\n]\n\nexport default serviceInfo;","import React from \"react\";\nimport PageInfo from \"./pageInfo\";\nimport ServicesOutPut from \"./servicesoutput\";\nimport serviceInfo from \"./serviceItems\";\n\nimport \"./services.css\";\n\n\nconst createService = (serviceInfo) => {\n        return(\n            <ServicesOutPut\n            title={serviceInfo.title}\n            description={serviceInfo.description} />\n        )\n};\n\nconst Services = (props) => {\n    return (\n        <React.Fragment>\n            <div className=\"heading\">\n            <header>\n                <h1>SERVICES</h1>\n            </header>\n            </div>\n                <div className=\"page_info_services\">\n                    {serviceInfo.map(createService)}\n                </div>\n        </React.Fragment>\n    )\n}\n\nexport default Services;","const trainingInfo = [\n    {\n        title: \"Methodology\",\n        methods:[\n            \"Heavy emphasis on building a strong base with mobility work with proper warm ups\",\n            \"Build a strong technical foundation with the basic lifts SQUAT DEADLIFT PULLING and PRESSING\",\n            \"Metabolic conditioning achieved through higher rep HIT style training\",\n            \"More advanced movements get added CLEAN AND JERK and SNATCH\"\n        ]\n    }\n]\n\nexport default trainingInfo;","import React, { useState } from \"react\";\nimport { MdArrowDropDownCircle } from \"react-icons/md\";\nimport trainingInfo from \"./training-profile-list\";\nimport { CSSTransition } from \"react-css-transition\";\nimport \"./trainingProfileOutput.css\"\n\n\n\nconst TrainingList = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const accordionHandler = () =>{\n        if(isOpen){\n            console.log(isOpen);\n            setIsOpen(false);\n        } else{\n            console.log(isOpen);\n            setIsOpen(true);\n        };\n    }\n    return (\n        <div className=\"training_list\">\n            \n                <header className=\"header\">\n                    <h3 onClick={accordionHandler} className=\"training_header\">{props.title} <MdArrowDropDownCircle /></h3>\n                </header>\n                <ul className=\"list_frame\" style={{\n                        padding:!isOpen ? 0 : 15, \n                        margin:!isOpen ? 0 : 3,  \n                        height: !isOpen ? 0 : \"auto\", \n                        opacity: !isOpen ? 0 : 1, \n                        transition: \"all .2s ease-out\" }}>\n                {props.items.map(methods => {\n                    return(\n                            <li style= {{\n                                padding:!isOpen ? 0 : 15, \n                                margin:!isOpen ? 0 : 3,\n                                opacity: !isOpen ? 0 : 1, \n                                transition: \"all .2s linear\",\n                                }} className=\"training_list_items\">{methods}</li>\n                    )\n                })}\n                </ul>\n            \n        </div>\n    )\n};\n\n\nexport default TrainingList;\n\n","import React, { useState } from \"react\";\n\nimport profilepic from \"../../profilepic.jpeg\";\nimport trainingInfo from \"./training-profile-list\";\nimport TrainingList from \"./trainingProfileOutput\";\nimport { MdArrowDropDownCircle } from \"react-icons/md\";\nimport barbellfactor from \"../../barbellfactor.jpeg\";\n\n\n\nimport \"./aboutme.css\";\n\n\n\nconst AboutMe = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const accordionToggle = () => {\n        if(isOpen){\n            setIsOpen(false);\n        } else {\n            setIsOpen(true);\n        }\n    };\n    return (\n        <React.Fragment>\n        <div className=\"aboutme\">\n            <div className=\"profile_card\" >\n                <img className=\"profile_pic\" src={profilepic} alt=\"Profile Pic\" />\n            </div>\n            <div className=\"main_logo_box\">\n                <img className=\"main_logo\" src={barbellfactor} />\n            </div>\n        </div>\n            <div className=\"bio_container\">\n            <div className=\"bio_info\">\n                <header className=\"header\">\n                    <h3 onClick={accordionToggle} className=\"about_me_header\">{props.title} <MdArrowDropDownCircle /> </h3>\n                    \n                </header>\n                <ul className=\"list_frame\" style={{\n                        padding:!isOpen ? 0 : 15, \n                        margin:!isOpen ? 0 : 3,  \n                        height: !isOpen ? 0 : \"auto\", \n                        opacity: !isOpen ? 0 : 1, \n                        transition: \"all .2s ease-out\" }}>\n                {props.items.map(info => {\n                    return(\n                            <li \n                            style = {{\n                                padding:!isOpen ? 0 : 15, \n                                margin:!isOpen ? 0 : 3,\n                                height: !isOpen ? 0 : \"auto\", \n                                opacity: !isOpen ? 0 : 1, \n                                transition: \"all .2s ease-out\"\n                                }}className=\"about_list_item\">{info}</li>\n                    )\n                })}\n                </ul>\n            </div>\n                {trainingInfo.map(info =>{\n                return(\n                    <TrainingList\n                    title={info.title}\n                    items={info.methods}\n                    />\n                )\n            })}\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default AboutMe;\n\n\n","const greetingInfo = [\n    {\n        title: \"Jason Ollada\",\n        description: [\n            \"Over 10 years experience as a strength and conditioning coach\",\n            \"Have worked with over 100 clients during those years\",\n            \"USAW weightlifting certified\",\n            \"Crossfit CL-1 certified\",\n        ],\n    },\n]\n\nexport default greetingInfo;","import React, { useState } from \"react\";\nimport Card from \"../../shared/UIElements/Card\";\nimport PageInfo from \"./pageInfo\";\nimport { profilepic } from \"../../profilepic.jpeg\";\nimport AboutMe from \"./about-me\";\nimport greetingInfo from \"./greeting-info\";\nimport trainingInfo from \"./training-profile-list\";\nimport TrainingList from \"./trainingProfileOutput\";\n\n\n\nconst Greeting = (props) => {\n    return(\n        <div className=\"greeting_main\">\n            {greetingInfo.map(info =>{\n                return(\n                    <AboutMe\n                    title={info.title}\n                    items={info.description}\n                    />\n                )\n            })}\n        </div>\n    )\n    }\n\n\nexport default Greeting;\n\n","import React from \"react\";\n\nimport PageInfo from \"../components/pageInfo\";\nimport infoItems from \"../components/infoItems\";\nimport Services from \"../components/services\";\nimport Greeting from \"../components/greeting\";\nimport { motion } from 'framer-motion/dist/framer-motion';\nimport \"./HomePage.css\";\n\n\nconst createPageInfo = (infoItems) =>{\n    return (\n        <PageInfo\n        infoTitle={infoItems.title}\n        infoDescription={infoItems.description}\n        />\n    )\n}\n\n\nconst HomePage = () => {\n    return (\n        <React.Fragment>\n        <motion.div\n        initial={{width: 0}}\n        animate={{width: \"100%\"}}\n        exit={{x: window.innerWidth, transition: {duration: 0.2}}}>\n            <div className=\"page-info\">\n                {infoItems.map(createPageInfo)}\n            </div>\n            <Greeting />\n            <Services />\n        </motion.div>\n        </React.Fragment>\n    )\n};\n\n\nexport default HomePage;","const dayObj = new Date();\nconst year = dayObj.getFullYear();\nconst month = dayObj.getMonth()+1;\nconst day = dayObj.getDay()+1;\nconst newDate = day + \"/\" + month + \"/\" + year;\n\nconst macroData = [\n    {\n        id:\"mac1\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"20\",\n        dayOfWeek:\"Wednesday\",\n        carbs:\"75\",\n        protein:\"185\",\n        fats:\"110\"\n    },\n    {\n        id:\"mac2\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"21\",\n        dayOfWeek:\"Thursday\",\n        carbs:\"90\",\n        protein:\"200\",\n        fats:\"110\"\n    },\n    {\n        id:\"mac3\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"22\",\n        dayOfWeek:\"Friday\",\n        carbs:\"80\",\n        protein:\"185\",\n        fats:\"105\"\n    },\n    {\n        id:\"mac4\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"23\",\n        dayOfWeek:\"Saturday\",\n        carbs:\"160\",\n        protein:\"195\",\n        fats:\"50\"\n    },\n    {\n        id:\"mac5\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"24\",\n        dayOfWeek:\"Sunday\",\n        carbs:\"140\",\n        protein:\"190\",\n        fats:\"40\"\n    },\n    {\n        id:\"mac6\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"25\",\n        dayOfWeek:\"Monday\",\n        carbs:\"60\",\n        protein:\"185\",\n        fats:\"50\"\n    },\n    {\n        id:\"mac7\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"26\",\n        dayOfWeek:\"Tuesday\",\n        carbs:\"90\",\n        protein:\"190\",\n        fats:\"40\"\n    },\n    {\n        id:\"mac9\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"27\",\n        dayOfWeek:\"Wednesday\",\n        carbs:\"70\",\n        protein:\"190\",\n        fats:\"110\"\n    },\n    {\n        id:\"mac10\",\n        year:\"2022\",\n        month:\"June\",\n        day:\"28\",\n        dayOfWeek:\"Wednesday\",\n        carbs:\"70\",\n        protein:\"190\",\n        fats:\"110\"\n    },\n    {\n        id:\"mac11\",\n        year:\"2022\",\n        month:\"July\",\n        day:\"1\",\n        dayOfWeek:\"Wednesday\",\n        carbs:\"70\",\n        protein:\"230\",\n        fats:\"110\"\n    },\n    {\n        id:\"mac12\",\n        year:\"2022\",\n        month:\"July\",\n        day:\"2\",\n        dayOfWeek:\"Thursday\",\n        carbs:\"60\",\n        protein:\"180\",\n        fats:\"110\"\n    },\n    {\n        id:\"mac13\",\n        year:\"2022\",\n        month:\"July\",\n        day:\"3\",\n        dayOfWeek:\"Friday\",\n        carbs:\"110\",\n        protein:\"205\",\n        fats:\"90\"\n    },\n    {\n        id:\"mac14\",\n        year:\"2022\",\n        month:\"July\",\n        day:\"4\",\n        dayOfWeek:\"Saturday\",\n        carbs:\"220\",\n        protein:\"230\",\n        fats:\"50\"\n    },\n    {\n        id:\"mac15\",\n        year:\"2022\",\n        month:\"July\",\n        day:\"5\",\n        dayOfWeek:\"Sunday\",\n        carbs:\"130\",\n        protein:\"190\",\n        fats:\"45\"\n    },\n]\n\nexport default macroData;","import React, { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { v4 as uuidv4 } from 'uuid';\nimport macroData from \"./macro-items\";\nimport { motion } from 'framer-motion/dist/framer-motion';\nimport \"./update-macros.css\";\n\n\nconst UpdateMacros = (props) => {\n    const macroID = props.items.map(macro=> macro.id);\n    const foundMacros = props.items.map(macros => macros);\n    // for when node.js is hooked up\n    // const macroID= useParams().mid;\n    // const foundMacros = macroData.find(macro => macro.id === macroID);\n    // const macrosToUpdate = foundMacros.filter(macros => macros.id === macroID);\n    \n    const[macrosToUpdate, setMacrosToUpdate] = useState();\n    const navigate = useNavigate();\n    const [isValid, setIsValid] = useState(true);\n    const [formIsValid, setFormIsValid] = useState(false);\n    const [updateData, setUpdateData] = useState({\n        id:\"\",\n        day:\"\",\n        carbs:\"\",\n        protein:\"\",\n        fats:\"\"\n    });\n\n    useEffect(()=>{\n        const getMacrosToUpdate = () =>{\n            const updateMacros = [];\n            foundMacros.map(macros => {\n                const selectedMacrosID = macros.id\n                console.log(selectedMacrosID);\n                if(selectedMacrosID === macroID){\n                    console.log(\"here\");\n                    updateMacros.push(macros);\n                }\n            });\n        };\n        getMacrosToUpdate();\n    },[foundMacros])\n\n    const changeHandler = (event) => {\n        const macro = event.target.value;\n        const macroName = event.target.name;\n        const uid = uuidv4();\n        setUpdateData(preValue => {\n            return {\n                ...preValue,\n                [macroName]: macro,\n                id:preValue.id,\n                day:preValue.day\n            }\n        });\n    };\n\n    const postUpdateMacroData = (event) => {\n        console.log(updateData);\n        if(updateData.carbs.length === 0){\n            setIsValid(false);\n            setFormIsValid(false);\n            return null;\n        } \n        if (updateData.carbs.length === 0){\n            setIsValid(false);\n            setFormIsValid(false);\n            console.log(isValid);\n            return null;\n        } \n        if (updateData.protein.length === 0){\n                setIsValid(false);\n                setFormIsValid(false);\n                return null;\n            }\n        if (updateData.fats.length === 0){\n            setIsValid(false);\n            setFormIsValid(false);\n            return null;\n        } \n\n        setUpdateData({\n            carbs:\"\",\n            fats:\"\",\n            protein:\"\"\n        });\n        setFormIsValid(true);\n        event.preventDefault();\n        navigate('/dashboard');\n    };\n\n    if(!foundMacros){\n        return <h2>NO MACROS YET START ENTERING DATA</h2>\n    }\n\n\n    return (\n        <React.Fragment>\n        <motion.div\n            className=\"update_container\"\n            initial={{width: 0}}\n            animate={{width: \"100%\"}}\n            exit={{x: window.innerWidth, transition: {duration: 0.2}}}>\n                <h2 className=\"update_header\">Update Macros for {props.items.map(macros => macros.month)} {props.items.map(macros => macros.day)} </h2>\n            <form class=\"update_form_container\">\n                <div className=\"form_inputs\">\n                        <h4>Carbs</h4>\n                        <input\n                        className=\"macro_inputs\"\n                        required\n                        id=\"carbs\"\n                        element=\"input\"\n                        type=\"text\"\n                        name=\"carbs\"\n                        label=\"Carbs\"\n                        errorText=\"Please enter your carb intake in grams\"\n                        placeholder={props.items.map(macros => macros.carbs)}\n                        onChange={changeHandler} />\n                    </div>\n                    <div className=\"form_inputs\">\n                        <h4>Protein</h4>\n                        <input\n                        className=\"macro_inputs\"\n                        required\n                        id=\"protein\"\n                        element=\"input\"\n                        type=\"text\"\n                        name=\"protein\"\n                        label=\"Protein\"\n                        errorText=\"Please enter your protein intake in grams\"\n                        placeholder={props.items.map(macros => macros.protein)}\n                        onChange={changeHandler} />\n                    </div>\n                    <div className=\"form_inputs\">\n                        <h4>Fats</h4>\n                        <input\n                        className=\"macro_inputs\"\n                        required\n                        id=\"fats\"\n                        element=\"input\"\n                        type=\"text\"\n                        name=\"fats\"\n                        label=\"Fats\"\n                        errorText=\"Please enter your fat intake in grams\"\n                        placeholder={props.items.map(macros => macros.fats)}\n                        onChange={changeHandler} />\n                    </div>\n                        <button\n                        className=\"form_button\" \n                        onClick={postUpdateMacroData}>Click me</button>\n            </form>\n        </motion.div>\n        </React.Fragment>\n    );\n};\n\nexport default UpdateMacros;\n","import React, { useState, useEffect } from \"react\";\nimport UpdateMacros from \"./update-macros\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    BarElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { Bar } from 'react-chartjs-2';\nimport { Link } from \"react-router-dom\";\n\nimport \"./dashboard-output.css\";\n\nChartJS.defaults.color = \"black\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst DashboardOutput = (props) => {\n    const date = new Date();\n    const monthName = date.toLocaleString(\"en-US\", { month:\"long\" });\n    const [macroGraphInfo, setMacroGraphInfo] = useState ({\n        datasets:[],\n    });\n    const [chartOptions, setChartOptions] = useState({});\n    const macrosForGraph = props.items2.map(macros => macros);\n    const macroProps = props.items2;\n\n    useEffect(() => {\n        setMacroGraphInfo({\n            labels: macrosForGraph.map(macros=> macros.day),\n            datasets:[\n                {\n                    label:\"Grams of carbs\",\n                    data: macrosForGraph.map(macros=> macros.carbs),\n                    backgroundColor:\"#257ff5\",\n                    borderColor: \"#257ff5\",\n                    lineTension: .3,\n                    radius: 5,\n                },\n                {\n                    label:\"Grams of protein\",\n                    data: macrosForGraph.map(macros=> macros.protein),\n                    borderColor: \"#F06B2D\",\n                    backgroundColor:\"#F06B2D\",\n                    lineTension: .3,\n                    radius: 5\n                },\n                {\n                    label:\"Grams of fat\",\n                    data: macrosForGraph.map(macros=> macros.fats) ,\n                    backgroundColor:\"#f8df00\",\n                    borderColor: \"#f8df00\",\n                    lineTension: .3,\n                    radius: 5\n                },\n            ],\n        });\n        setChartOptions({\n            maintainAspectRatio: false,\n            responsive: true,\n            plugins: {\n                legend: {\n                position: 'top',\n            },\n                title: {\n                display: true,\n                text: monthName,\n                font:{\n                    size:50\n                }\n            },\n            },\n        });\n    },[macroProps])\n\n        return(\n                <div className=\"dashboard_card_container\">\n                    <div className=\"dashboard_card_info\">\n                                <div className=\"linechart\">\n                                    <Bar\n                                    data={macroGraphInfo}\n                                    options={chartOptions} />\n                                </div>\n                    <UpdateMacros\n                    items={macroProps} />\n                    </div>\n                </div> \n        )\n};\n\nexport default DashboardOutput;\n\n\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n    type: VALIDATOR_TYPE_MINLENGTH,\n    val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n    type: VALIDATOR_TYPE_MAXLENGTH,\n    val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n    let isValid = true;\n        for (const validator of validators) {\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n            isValid = isValid && value.trim().length > 0;\n        }\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n            isValid = isValid && value.trim().length >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n            isValid = isValid && value.trim().length <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MIN) {\n            isValid = isValid && +value >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAX) {\n            isValid = isValid && +value <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n        }\n    }\n        return isValid;\n    };","import React, { useState } from \"react\";\nimport { VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { Link, } from \"react-router-dom\";\nimport UpdateMacros from \"./update-macros\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport \"./macros-form.css\"\n\nconst MacrosForm = (props) => {\n    const [isValid, setIsValid] = useState(true);\n    const [formIsValid, setFormIsValid] = useState(false);\n    const [macroData, setMacroData] = useState({\n        id:\"\",\n        year:\"\",\n        month:\"\",\n        day:\"\",\n        carbs:\"\",\n        protein:\"\",\n        fats:\"\"\n    });\n\n\n    const changeHandler = (event) => {\n        const macro = event.target.value;\n        const macroName = event.target.name;\n        const uid = uuidv4();\n        const dayOfMonth = Math.floor((Math.random() * 15) +1 );\n        const macroDateEntry = new Date();\n\n        setMacroData(preValue => {\n            return {\n                ...preValue,\n                [macroName]: macro,\n                id:uid,\n                year: macroDateEntry.getFullYear(),\n                month: macroDateEntry.toLocaleString(\"en-US\", { month:\"long\" }),\n                day:macroDateEntry.getDate(),\n            }\n        });\n    };\n\n    const postMacroData = (event) => {\n        console.log(macroData);\n        if(macroData.carbs.length === 0){\n            setIsValid(false);\n            setFormIsValid(false);\n            return null;\n        } \n        if (macroData.carbs.length === 0){\n            setIsValid(false);\n            setFormIsValid(false);\n            console.log(isValid);\n            return null;\n        } \n        if (macroData.protein.length === 0){\n                setIsValid(false);\n                setFormIsValid(false);\n                return null;\n            }\n        if (macroData.fats.length === 0){\n            setIsValid(false);\n            setFormIsValid(false);\n            return null;\n        } else {\n            props.onAdd(macroData);\n        }\n        setMacroData({\n            carbs:\"\",\n            fats:\"\",\n            protein:\"\"\n        });\n        setFormIsValid(true);\n        event.preventDefault();\n        \n    };\n\n    return (\n        <div className=\"form_container\">\n        <div className=\"diet_form\">\n            <div className=\"diet_form_header_box\">\n            <h2>Enter your macros</h2>\n            </div>\n                <form className=\"form_box\">\n                <div className=\"form_inputs\">\n                    <h4>Carbs</h4>\n                    <input\n                    className=\"macro_input\"\n                    required\n                    size=\"large\"\n                    id={macroData.day}\n                    name=\"carbs\"\n                    label=\"Carbs\"\n                    value={macroData.carbs}\n                    errorText=\"Please enter your carb intake in grams\"\n                    placeholder=\"Grams of crabs\"\n                    onChange={changeHandler} />\n                </div>\n                <div className=\"form_inputs\">\n                    <h4>Protein</h4>\n                    <input\n                    className=\"macro_input\"\n                    required\n                    id={macroData.day}\n                    name=\"protein\"\n                    label=\"Protein\"\n                    value={macroData.protein}\n                    errorText=\"Please enter your protein intake in grams\"\n                    placeholder=\"Grams of protein\"\n                    onChange={changeHandler} />\n                </div>\n                <div className=\"form_inputs\">\n                    <h4>Fats</h4>\n                    <input\n                    className=\"macro_input\"\n                    required\n                    id={macroData.day}\n                    name=\"fats\"\n                    label=\"Fats\"\n                    value={macroData.fats}\n                    errorText=\"Please enter your fat intake in grams\"\n                    placeholder=\"Grams of fat\"\n                    onChange={changeHandler} />\n                </div>\n                    <button\n                    className=\"form_button\" \n                    onClick={postMacroData}\n                    in={props.in}>Click me</button>\n                </form>\n                {!isValid ? <div style={{display: formIsValid && \"none\"}} className=\"error_message\"><p className=\"form_error_message\">Please enter all fields</p></div> : null}\n        </div>\n    </div>\n    );\n};\n\nexport default MacrosForm;\n\n","import React, { useState, useEffect } from \"react\";\nimport DashboardOutput from \"./dashboard-output\";\nimport MacrosForm from \"./macros-form\";\nimport UpdateMacros from \"./update-macros\";\nimport { motion } from 'framer-motion/dist/framer-motion';\n\nimport \"./dashboard.css\";\n\n\nconst Dashboard = () => {\n    const [macros, setMacros] = useState([]);\n    const addMacros = (newMacros) => {\n        setMacros((prevMacros)=> {\n            return [...prevMacros, newMacros]\n        });\n    };\n    const [macrosEnteredForDay, setMacrosForDayEntered] = useState(false);\n\n    useEffect(()=>{\n        const checkMacrosForDayEntered = ()=>{\n            if(macros.length > 0){\n                console.log(true);\n                setMacrosForDayEntered(true);\n            } else {\n                console.log(false)\n            }\n        }\n        checkMacrosForDayEntered();\n    },[macros])\n\n    if(!macrosEnteredForDay){\n        return(\n            <React.Fragment>\n            <motion.div\n            initial={{width: 0}}\n            animate={{width: \"100%\"}}\n            exit={{x: window.innerWidth, transition: {duration: 0.2}}}>\n                <div className=\"macro_header_box\">\n                    <h2>MACRO TRACKER</h2>\n                </div>\n                <MacrosForm items={macros} onAdd={addMacros} />\n            </motion.div>\n        </React.Fragment>\n        )\n    };\n\n    if(macrosEnteredForDay){\n        return(\n            <React.Fragment>\n            <motion.div\n            initial={{width: 0}}\n            animate={{width: \"100%\"}}\n            exit={{x: window.innerWidth, transition: {duration: 0.2}}}>\n                <div className=\"macro_header_box\">\n                    <h2>MACRO TRACKER</h2>\n                </div>\n                <DashboardOutput\n                items2={macros}\n                items={macros} />\n            </motion.div>\n        </React.Fragment>\n        )\n    };\n}\n\nexport default Dashboard;\n\n\n","const months = [\n    {\n        month:\"January\"\n    },\n    {\n        month:\"February\"\n    },\n    {\n        month:\"April\"\n    },\n    {\n        month:\"May\"\n    },\n    {\n        month:\"June\"\n    },\n    {\n        month:\"July\"\n    },\n    {\n        month:\"August\"\n    },\n    {\n        month:\"September\"\n    },\n    {\n        month:\"October\"\n    },\n    {\n        month:\"November\"\n    },\n    {\n        month:\"December\"\n    },\n]\n\nexport default months;","import React from \"react\";\nimport months from \"../../dashboard/components/month-select-options\";\n\nimport \"./drop-down-select.css\";\n\nconst DropDownSelect =(props) => {\n    return(\n        <div className=\"select_container\">\n        <label className=\"select_label\">Select Month</label>\n            <select\n            className=\"select_field\"\n            name={props.name}\n            isLoaded={props.isLoaded}\n            onChange={props.onChange}>\n                {months.map(month => {\n                    \n                    return(\n                        <option className=\"select_option\">{month.month}</option>\n                    )\n                })}\n            </select>\n        </div>\n    )\n};\n\nexport default DropDownSelect;\n\n\n","import React from \"react\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst LineChart = ( {macroData}, {chartOptions} ) => {\n    return(\n        <Line\n        data = {macroData}\n        options= {chartOptions} />\n    )\n};\n\nexport default LineChart;","import React , { useState, useEffect } from \"react\";\nimport macroData from \"./macro-items\";\nimport DropDownSelect from \"../../shared/UIElements/drop-down-select\";\nimport DatePicker from \"react-datepicker\";\nimport months from \"./month-select-options\";\nimport LineChart from \"../../shared/components/LineChart\";\nimport { Link } from \"react-router-dom\";\nimport { motion } from 'framer-motion/dist/framer-motion';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport \"./get-macros.css\";\n\nChartJS.defaults.color = \"black\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst GetMacros = () => {\n    const date = new Date();\n    const monthName = date.toLocaleString(\"en-US\", { month:\"long\" });\n    const [isSelectedMonthLoaded, setIsSelectedMonthLoaded] = useState(false);\n    const [selectedMonth, setSelectedMonth] = useState();\n    const [macroInfo, setMacroInfo] = useState ({\n        datasets:[],\n    });\n    const [chartOptions, setChartOptions] = useState({});\n    const month = macroData.filter((macro) => macro.month);\n\n    const handleSelect = (event) =>{\n        console.log(\"here\");\n        const choice = event.target.value;\n        setSelectedMonth(choice);\n    };\n\n    useEffect(()=> {\n        console.log(month);\n        const day = new Date();\n        const currentMonth = day.toLocaleString(\"en-US\", { month:\"long\" });\n        const foundMonth = [];\n        const newMonth = [];\n        //helper function for selected month\n        const getMonths = () => {\n            macroData.map((macros)=>{\n                if(selectedMonth === macros.month){\n                    setIsSelectedMonthLoaded(true);\n                    foundMonth.push(macros);\n                                } if (foundMonth.length === 0){\n                                    console.log(foundMonth.length);\n                                    setIsSelectedMonthLoaded(false);\n                                    console.log(isSelectedMonthLoaded);\n                                }\n                            })\n                        };\n            getMonths();\n            console.log(foundMonth);\n            console.log(newMonth);\n        setMacroInfo({\n            labels: foundMonth.map(macros=>macros.day),\n            datasets:[\n                {\n                    label:\"Grams of carbs\",\n                    data:foundMonth.map(macros=>macros.carbs),\n                    borderColor: \"#257ff5\",\n                    lineTension: .3,\n                    radius: 5,\n                    \n                    \n                },\n                {\n                    label:\"Grams of protein\",\n                    data:foundMonth.map(macros=>macros.protein),\n                    borderColor: \"#F06B2D\",\n                    lineTension: .3,\n                    radius: 5\n                },\n                {\n                    label:\"Grams of fat\",\n                    data:foundMonth.map(macros=>macros.fats) ,\n                    borderColor: \"#f8df00\",\n                    lineTension: .3,\n                    radius: 5\n                },\n            ],\n        });\n\n        setChartOptions({\n            maintainAspectRatio: false,\n            responsive: true,\n            plugins: {\n                legend: {\n                position: 'top',\n            },\n                title: {\n                display: true,\n                text: selectedMonth,\n                font:{\n                    size:50\n                }\n            },\n            },\n        });\n        console.log(macroInfo);\n        console.log(selectedMonth);\n    },[selectedMonth])\n\n    if(!selectedMonth && !isSelectedMonthLoaded){\n        return (\n            <React.Fragment>\n                <DropDownSelect\n                name={selectedMonth}\n                onChange={handleSelect}\n                isLoaded={setIsSelectedMonthLoaded} />\n                <div className=\"center\">\n                    <h2>Please select a month to view macro for that month</h2>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    if (!isSelectedMonthLoaded && selectedMonth){\n        return (\n            <React.Fragment>\n                <DropDownSelect\n                name={selectedMonth}\n                onChange={handleSelect}\n                isLoaded={setIsSelectedMonthLoaded} />\n                <div className=\"center\">\n                    <h2>No data yet for the selected month</h2>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    return(\n        <React.Fragment>\n        <DropDownSelect\n        name={selectedMonth}\n        onChange={handleSelect}\n        isLoaded={setIsSelectedMonthLoaded} />\n            <div className=\"linechart\">\n                <Line\n                data={macroInfo}\n                options={chartOptions} \n                />\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default GetMacros;\n","const session = [\n    {\n        id:\"w1\",\n        month:\"July\",\n        day:\"1\",\n        movement:\"Back Squat\",\n        rounds:\"5\",\n        reps:\"5\",\n        weight:\"143kg\"\n    },\n    {\n        id:\"w2\",\n        month:\"July\",\n        day:\"1\",\n        movement:\"Power clean\",\n        rounds:\"5\",\n        reps:\"3\",\n        weight:\"85kg\"\n    },\n    {\n        id:\"w3\",\n        month:\"July\",\n        day:\"1\",\n        movement:\"Press\",\n        rounds:\"5\",\n        reps:\"5\",\n        weight:\"65kg\"\n    },\n    {\n        id:\"w4\",\n        month:\"July\",\n        day:\"2\",\n        movement:\"Power Snatch\",\n        rounds:\"5\",\n        reps:\"5\",\n        weight:\"60kg\"\n    },\n    {\n        id:\"w5\",\n        month:\"July\",\n        day:\"2\",\n        movement:\"Snatch pull + floating snatch + snatch\",\n        rounds:\"5\",\n        reps:\"1 + 1 + 1\",\n        weight:\"80kg\"\n    },\n    {\n        id:\"w6\",\n        month:\"July\",\n        day:\"2\",\n        movement:\"OHS\",\n        rounds:\"5\",\n        reps:\"5\",\n        weight:\"80kg\"\n    },\n    {\n        id:\"w7\",\n        month:\"July\",\n        day:\"3\",\n        movement:\"Front Squat\",\n        rounds:\"5\",\n        reps:\"5\",\n        weight:\"125kg\"\n    },\n    {\n        id:\"w8\",\n        month:\"July\",\n        day:\"3\",\n        movement:\"Muscle Snatch\",\n        rounds:\"5\",\n        reps:\"5\",\n        weight:\"55kg\"\n    },\n    {\n        id:\"w9\",\n        month:\"August\",\n        day:\"1\",\n        movement:\"Clean pull + clean\",\n        rounds:\"5\",\n        reps:\"1 + 1\",\n        weight:\"115kg\"\n    },\n    {\n        id:\"w10\",\n        month:\"August\",\n        day:\"1\",\n        movement:\"Push Jerk + Split Jerk\",\n        rounds:\"6\",\n        reps:\"1 + 3\",\n        weight:\"100kg\"\n    },\n    {\n        id:\"w11\",\n        month:\"August\",\n        day:\"2\",\n        movement:\"Front Squat\",\n        rounds:\"5\",\n        reps:\"5\",\n        weight:\"128kg\"\n    },\n    {\n        id:\"w12\",\n        month:\"August\",\n        day:\"2\",\n        movement:\"hip snatch + hang snatch\",\n        rounds:\"5\",\n        reps:\"1 + 2\",\n        weight:\"85kg\"\n    },\n]\n\nexport default session;","import React, { useState } from \"react\";\nimport { motion } from 'framer-motion/dist/framer-motion';\nimport session from \"./workout-data\";\n\nimport \"./update-workouts.css\";\n\nconst UpdateWorkouts = (props) => {\n    const workoutToUpdate = props;\n    console.log(workoutToUpdate);\n    const[updateInfo, setUpdateInfo] = useState({\n        movement:\"\",\n        rounds:\"\",\n        reps:\"\",\n        weight:\"\"\n    })\n    const handleChange = (event) => {\n        const inputName = event.target.name;\n        const inputValue = event.target.value;\n        setUpdateInfo(prevValue => {\n            return {\n                ...prevValue,\n                [inputName]:inputValue,\n            }\n        })\n    };\n\n    const postUpdate = (event) => {\n        event.preventDefault();\n        // props.onUpdate(updateInfo);\n        console.log(updateInfo);\n        setUpdateInfo({\n            movement:\"\",\n            rounds:\"\",\n            reps:\"\",\n            weight:\"\"\n        })\n    };\n\n    return (\n        <form className=\"all_workouts_session_container_form\">\n        <motion.div\n        initial={{width: 0}}\n        animate={{width: \"fit-content\"}}\n        exit={{x: window.innerWidth, transition: {duration: 0.2}}} \n        className=\"movement_data\">\n                    <div className=\"movement_header_box\">\n                        <h4>Movement:</h4>\n                        <textarea\n                        name=\"movement\"\n                        label=\"Movement\"\n                        placeholder={props.workoutitems.movement}\n                        onChange={handleChange} />\n                    </div>\n                        <div className=\"movement_description_box\">\n                            <h4>Rounds:</h4>\n                            <input\n                            name=\"rounds\"\n                            label=\"Rounds\"\n                            placeholder={props.workoutitems.rounds}\n                            onChange={handleChange} />\n                            <h4>Reps:</h4>\n                            <input\n                            name=\"reps\"\n                            label=\"Reps\"\n                            placeholder={props.workoutitems.reps}\n                            onChange={handleChange} />\n                            <h4>Weight:</h4>\n                            <input\n                            name=\"weight\"\n                            label=\"Weight\"\n                            placeholder={props.workoutitems.weight}\n                            onChange={handleChange} />\n                    </div>\n                    <div className=\"button_container_update_workouts\">\n                        <button \n                        className=\"form_button\"\n                        onClick={postUpdate}>Update</button>\n                    </div>\n        </motion.div>\n        </form>\n    );\n};\n\nexport default UpdateWorkouts;\n","import React, { useEffect, useState } from \"react\";\nimport months from \"./month-select-options\";\nimport session from \"./workout-data\";\nimport UpdateWorkouts from \"./update-workouts\";\nimport DropDownSelect from \"../../shared/UIElements/drop-down-select\";\nimport { motion } from 'framer-motion/dist/framer-motion';\nimport \"./get-all-workouts.css\";\n\nconst GetAllWorkoutData = () =>{\n    const [updateWorkout, setUpdateWorkout] = useState([]);\n    const [isSelectedMonthLoaded, setIsSelectedMonthLoaded] = useState(false);\n    const [isUpdateMode, setIsUpdateMode] = useState (false);\n    //State to store selected month\n    const [selectedMonth, setSelectedMonth] = useState();\n    //State to store foundMonth to be populated on page\n    const [loggedMonth, setLoggedMonth] = useState([]);\n    //Store the selected month data in new array\n    let foundMonth = [];\n    //Holds the month workout data\n    let loggedSession = [];\n    //Holds the workoutto be updated array\n    let workoutToUpdateArray = [];\n    // Holds the ID of selected workout\n    let selectedWorkoutToUpdate;\n    //helper function to select month\n\n    const getWorkoutToUpdateId = (event) => {\n        let selectedWorkoutToUpdate = event.target.value;\n        console.log(selectedWorkoutToUpdate);\n        session.map(workouts => {\n            if(selectedWorkoutToUpdate === workouts.id){\n                workoutToUpdateArray.push(workouts);\n                setUpdateWorkout(workouts);\n                console.log(workoutToUpdateArray);\n            }\n            return workoutToUpdateArray;\n        })\n        if(isUpdateMode){\n            setIsUpdateMode(false);\n        } else {\n            setIsUpdateMode(true);\n            console.log(isUpdateMode);\n        }\n    };\n\n    const updateModeHandler = () => {\n        if(isUpdateMode){\n            setIsUpdateMode(false);\n        } else {\n            setIsUpdateMode(true);\n            console.log(isUpdateMode);\n        }\n    }\n\n    const handleSelect = (event) =>{\n        console.log(\"here\");\n        const choice = event.target.value;\n        setSelectedMonth(choice);\n    };\n\n    useEffect(()=>{\n    //generates the new movement objects for the new month and day keys\n    const generateMovementObjects = (session)=> {\n        return {\n            id:session.id,\n            movement:session.movement,\n            rounds: session.rounds,\n            reps:session.reps,\n            weight:session.weight\n        }\n    };\n    //Check to see if month exists\n    const doesMonthExist = (session) => {\n        return loggedSession.find((lsession)=> lsession.month === session.month)\n    };\n    //Check to see if day already existed in month...isMonthFound comes from the session.map() on bottom\n    const doesDayExist = (isMonthFound, session) => {\n        return isMonthFound.days.find((monthDays)=> monthDays.day === session.day)\n    };\n    //Helper method to generate activities based on day\n    const generateDaySession = (session) => {\n        return {\n            day: session.day,\n            activities:[generateMovementObjects(session)]\n        }\n    }\n    //map through the incoming data\n    session.map((sessions)=>{\n        let isMonthFound = doesMonthExist(sessions);\n        if(isMonthFound){\n            let isDayFound = doesDayExist(isMonthFound, sessions);\n            if(isDayFound){\n                isDayFound.activities.push(generateMovementObjects(sessions))\n            } else {\n                isMonthFound.days.push(generateDaySession(sessions))\n            }\n        } else {\n            loggedSession.push({\n                month:sessions.month,\n                days:[generateDaySession(sessions)]\n            })\n        }\n    })\n\n    const getMonths = () => {\n        loggedSession.map((sessions)=>{\n            if(selectedMonth === sessions.month){\n                foundMonth.push(sessions);\n                setIsSelectedMonthLoaded(true);\n                            } if (foundMonth.length === 0){\n                                setIsSelectedMonthLoaded(false);\n                            }\n                        })\n                    };\n        getMonths();\n        setLoggedMonth(foundMonth);\n        console.log(foundMonth);\n    },[selectedMonth])\n\n    if(!selectedMonth && !isSelectedMonthLoaded){\n        return (\n            <React.Fragment>\n                <DropDownSelect\n                name={selectedMonth}\n                onChange={handleSelect}\n                isLoaded={setIsSelectedMonthLoaded} />\n                <div className=\"center\">\n                    <h2>Please select a month to view workouts for that month</h2>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    if (!isSelectedMonthLoaded && selectedMonth){\n        return (\n            <React.Fragment>\n                <DropDownSelect\n                name={selectedMonth}\n                onChange={handleSelect}\n                isLoaded={setIsSelectedMonthLoaded} />\n                <div className=\"center\">\n                    <h2>No data yet for the selected month</h2>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    if(isUpdateMode){\n        return(\n            <UpdateWorkouts\n            workoutitems={updateWorkout} />\n        )\n    }\n\n    return(\n        <React.Fragment>\n        <DropDownSelect\n            name={selectedMonth}\n            onChange={handleSelect}\n            isLoaded={setIsSelectedMonthLoaded} />\n            <motion.div \n            className=\"page_container\"\n            initial={{width: 0}}\n            animate={{width: \"100%\"}}\n            exit={{x: window.innerWidth, transition: {duration: 0.2}}}>\n                {loggedMonth.map(session => {\n                    const month = session.month;\n                    const day = session.days;\n                    return (\n                        <div className=\"month_container\">\n                            <h2 className=\"month_header_center\">{month}</h2>\n                            {day.map(fDay => {\n                                const foundDay = fDay.day;\n                                const foundActivities = fDay.activities;\n                                return (\n                                    <div className=\"all_workouts_session_container\">\n                                        <h2>{foundDay}</h2> \n                                        {foundActivities.map(workouts =>{\n                                            let selectedWorkoutToUpdate = workouts.id;\n                                            return(\n                                                <div id={workouts.id} className=\"movement_data\">\n                                                    <div className=\"movement_header_box\">\n                                                        <p>Movement: {workouts.movement}</p>\n                                                    </div>\n                                                    <div className=\"movement_description_box\">\n                                                        <p>Rounds: {workouts.rounds}</p>\n                                                        <p>Reps: {workouts.reps}</p>\n                                                        <p>Weight: {workouts.weight}</p>\n                                                    </div> \n                                                    <div className=\"button_container_update_workout\">\n                                                        <button\n                                                        value={selectedWorkoutToUpdate}\n                                                        name={workouts.movement}\n                                                        onUpdate={updateModeHandler}\n                                                        onClick={getWorkoutToUpdateId} \n                                                        className=\"form_button\" >Edit</button>\n                                                    </div> \n                                                </div> \n                                            )\n                                        })}\n                                    </div>\n                                    \n                                )\n                            })}\n                        </div>\n                    )\n                })}\n            </motion.div>\n        </React.Fragment>\n\n    )\n    };\n\nexport default GetAllWorkoutData;","import React, { useState, useEffect } from \"react\";\nimport months from \"./month-select-options\";\nimport session from \"./workout-data\";\nimport DropDownSelect from \"../../shared/UIElements/drop-down-select\";\n\nimport \"./get-all-workouts.css\";\nimport UpdateWorkouts from \"./update-workouts\";\n\n//Area to test components\n\nconst TestWorkoutArea = () => {\n    const [selectedMonth, setSelectedMonth] = useState();\n    const [loggedMonth, setLoggedMonth] = useState([]);\n    const [updateWorkout, setUpdateWorkout] = useState([]);\n    const [isSelectedMonthLoaded, setIsSelectedMonthLoaded] = useState(false);\n    const [isUpdateMode, setIsUpdateMode] = useState (false);\n    //Holds the month workout data\n    let loggedSession = [];\n    //for conditionally rendered selected month\n    let foundMonth = [];\n    //array to hold the workout to update\n    let workoutToUpdateArray = [];\n    //grabs the workout ID\n    let selectedWorkoutToUpdate;\n\n    const getWorkoutToUpdateId = (event) => {\n        let selectedWorkoutToUpdate = event.target.value;\n        console.log(selectedWorkoutToUpdate);\n        session.map(workouts => {\n            if(selectedWorkoutToUpdate === workouts.id){\n                workoutToUpdateArray.push(workouts);\n                setUpdateWorkout(workouts);\n                console.log(workoutToUpdateArray);\n            }\n            return workoutToUpdateArray;\n        })\n        if(isUpdateMode){\n            setIsUpdateMode(false);\n        } else {\n            setIsUpdateMode(true);\n            console.log(isUpdateMode);\n        }\n    };\n\n    const updateModeHandler = () => {\n        if(isUpdateMode){\n            setIsUpdateMode(false);\n        } else {\n            setIsUpdateMode(true);\n            console.log(isUpdateMode);\n        }\n    }\n\n    const handleSelect = (event) =>{\n        const choice = event.target.value;\n        setSelectedMonth(choice);\n    };\n\n\n    useEffect(()=>{\n\n                        //generates the new movement objects for the new month and day keys\n                        const generateMovementObjects = (session)=> {\n                            return {\n                                id:session.id,\n                                movement:session.movement,\n                                rounds: session.rounds,\n                                reps:session.reps,\n                                weight:session.weight\n                            }\n                        };\n                    \n                        //Check to see if month exists\n                        const doesMonthExist = (session) => {\n                            return loggedSession.find((lsession)=> lsession.month === session.month)\n                        };\n                    \n                        //Check to see if day already existed in month...isMonthFound comes from the session.map() on bottom\n                        const doesDayExist = (isMonthFound, session) => {\n                            return isMonthFound.days.find((monthDays)=> monthDays.day === session.day)\n                        };\n                    \n                        //Helper method to generate activities based on day\n                        const generateDaySession = (session) => {\n                            return {\n                                day: session.day,\n                                activities:[generateMovementObjects(session)]\n                            }\n                        }\n                    \n                        //map through the incoming data\n                        session.map((sessions)=>{\n                            let isMonthFound = doesMonthExist(sessions);\n                            if(isMonthFound){\n                                let isDayFound = doesDayExist(isMonthFound, sessions);\n                                if(isDayFound){\n                                    isDayFound.activities.push(generateMovementObjects(sessions))\n                                } else {\n                                    isMonthFound.days.push(generateDaySession(sessions))\n                                }\n                            } else {\n                                loggedSession.push({\n                                    month:sessions.month,\n                                    days:[generateDaySession(sessions)]\n                                })\n                            }\n                        })\n\n        const getMonths = () => {\n            loggedSession.map((sessions)=>{\n                console.log(sessions)\n                if(selectedMonth === sessions.month){\n                    setIsSelectedMonthLoaded(true);\n                    foundMonth.push(sessions);\n                                } if (foundMonth.length === 0){\n                                    setIsSelectedMonthLoaded(false);\n                                } \n                            })\n                        };\n            getMonths();\n            setLoggedMonth(foundMonth);\n    },[selectedMonth])\n\n    if(!selectedMonth && !isSelectedMonthLoaded){\n        return (\n            <React.Fragment>\n                <DropDownSelect\n                name={selectedMonth}\n                onChange={handleSelect}\n                isLoaded={setIsSelectedMonthLoaded} />\n                <div className=\"center\">\n                    <h2>Please select a month to view workouts for that month</h2>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    if (!isSelectedMonthLoaded && selectedMonth){\n        return (\n            <React.Fragment>\n                <DropDownSelect\n                name={selectedMonth}\n                onChange={handleSelect}\n                isLoaded={setIsSelectedMonthLoaded} />\n                <div className=\"center\">\n                    <h2>No data yet for the selected month</h2>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    if(isUpdateMode){\n        return(\n            <UpdateWorkouts\n            workoutitems={updateWorkout} />\n        )\n    }\n\n    return(\n        <React.Fragment>\n        <DropDownSelect\n            name={selectedMonth}\n            onChange={handleSelect}\n            isLoaded={setIsSelectedMonthLoaded} />\n        <div className=\"page_container\">\n            {loggedMonth.map(session => {\n                const month = session.month;\n                const day = session.days;\n                return (\n                    <div className=\"month_container\">\n                        <h2 className=\"month_header_center\">{month}</h2>\n                        {day.map(fDay => {\n                            const foundDay = fDay.day;\n                            const foundActivities = fDay.activities;\n                            return (\n                                <div className=\"all_workouts_session_container\">\n                                    <h2>{foundDay}</h2> \n                                    {foundActivities.map(workouts =>{\n                                        let selectedWorkoutToUpdate = workouts.id;\n                                        return(\n                                            <div id={workouts.id} className=\"movement_data\">\n                                                <div className=\"movement_header_box\">\n                                                    <p>Movement: {workouts.movement}</p>\n                                                </div>\n                                                <div className=\"movement_description_box\">\n                                                    <p>Rounds: {workouts.rounds}</p>\n                                                    <p>Reps: {workouts.reps}</p>\n                                                    <p>Weight: {workouts.weight}</p>\n                                                </div> \n                                                <div className=\"button_container_update_workout\">\n                                                    <button\n                                                    value={selectedWorkoutToUpdate}\n                                                    name={workouts.movement}\n                                                    onUpdate={updateModeHandler}\n                                                    onClick={getWorkoutToUpdateId} \n                                                    className=\"form_button\" >Edit</button>\n                                                </div> \n                                            </div> \n                                        )\n                                    })}\n                                </div>\n                                \n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n        </React.Fragment>\n    )\n};\n\nexport default TestWorkoutArea;\n\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport \"./workout-form.css\"\n\n\nconst WorkoutForm = (props)=>{\n    const [workoutData, setWorkoutData] = useState({\n        id:\"\",\n        year:\"\",\n        month:\"\",\n        day:\"\",\n        user:\"\",\n        movement:\"\",\n        rounds:\"\",\n        reps:\"\",\n        weight:\"\"\n\n    })\n    const changeHandler = (event)=>{\n        const inputName = event.target.name;\n        const inputValue = event.target.value;\n        const uid = uuidv4();\n        const workoutEntryDate = new Date();\n        setWorkoutData(prevValue => {\n            return {\n                ...prevValue,\n                [inputName]:inputValue,\n                id:uid,\n                year: workoutEntryDate.getFullYear(),\n                month: workoutEntryDate.toLocaleString(\"en-US\", { month:\"long\" }),\n                day:workoutEntryDate.getDate(),\n            }\n        })\n    };\n\n    const postWorkoutData = (event) => {\n        event.preventDefault();\n        props.workoutItems(workoutData);\n        setWorkoutData({\n            movement:\"\",\n            rounds:\"\",\n            reps:\"\",\n            weight:\"\"\n        });\n        \n        console.log(workoutData);\n        // validations to hook up later\n        // if(workoutData.exercise.length === 0){\n        //     setIsValid(false);\n        //     setFormIsValid(false);\n        //     return null;\n        // } \n        // if (workoutData.reps.length === 0){\n        //     setIsValid(false);\n        //     setFormIsValid(false);\n        //     console.log(isValid);\n        //     return null;\n        // } \n        // if (workoutData.rounds.length === 0){\n        //         setIsValid(false);\n        //         setFormIsValid(false);\n        //         return null;\n        //     }\n        // else {\n        //     props.workoutItems(workoutData);\n        // }\n        // setFormIsValid(true);\n        \n    };\n\n    return(\n        <React.Fragment>\n            <div className=\"workout_form_header_box\">\n                    <h2>Enter your workout</h2>\n            </div>\n            <form className=\"all_workouts_session_container_form\">\n            <div className=\"movement_data\">\n            <div className=\"movement_header_box\">\n                <h4>Movement:</h4>\n                <textarea\n                name=\"movement\"\n                value={workoutData.movement}\n                label=\"Movement\"\n                placeholder=\"Enter movement\"\n                onChange={changeHandler} />\n            </div>\n                <div className=\"movement_description_box\">\n                    <h4>Rounds:</h4>\n                    <input\n                    name=\"rounds\"\n                    value={workoutData.rounds}\n                    label=\"Rounds\"\n                    placeholder=\"Enter rounds\"\n                    onChange={changeHandler} />\n                    <h4>Reps:</h4>\n                    <input\n                    name=\"reps\"\n                    value={workoutData.reps}\n                    label=\"Reps\"\n                    placeholder=\"Enter reps\"\n                    onChange={changeHandler} />\n                    <h4>Weight:</h4>\n                    <input\n                    name=\"weight\"\n                    value={workoutData.weight}\n                    label=\"Weight\"\n                    placeholder=\"Enter weight\"\n                    onChange={changeHandler} />\n            </div>\n            <div className=\"button_container_update_workouts\">\n                <button \n                className=\"form_button\"\n                onClick={postWorkoutData}>Enter</button>\n            </div>\n            </div>\n</form>\n        </React.Fragment>\n    )\n};\n\nexport default WorkoutForm;\n\n{/* <form className=\"all_workouts_session_container_form\">\n<div className=\"movement_data\">\n            <div className=\"movement_header_box\">\n                <h4>Movement:</h4>\n                <textarea\n                name=\"movement\"\n                label=\"Movement\"\n                placeholder={props.workoutitems.movement}\n                onChange={handleChange} />\n            </div>\n                <div className=\"movement_description_box\">\n                    <h4>Rounds:</h4>\n                    <input\n                    name=\"rounds\"\n                    label=\"Rounds\"\n                    placeholder={props.workoutitems.rounds}\n                    onChange={handleChange} />\n                    <h4>Reps:</h4>\n                    <input\n                    name=\"reps\"\n                    label=\"Reps\"\n                    placeholder={props.workoutitems.reps}\n                    onChange={handleChange} />\n                    <h4>Weight:</h4>\n                    <input\n                    name=\"weight\"\n                    label=\"Weight\"\n                    placeholder={props.workoutitems.weight}\n                    onChange={handleChange} />\n            </div>\n            <div className=\"button_container_update_workouts\">\n                <button \n                className=\"form_button\"\n                onClick={postUpdate}>Update</button>\n            </div>\n</div>\n</form> */}\n\n\n            {/* <div className=\"workout_form_container\">\n                <form className=\"workout_form\">\n                    <div className=\"movement_div\">\n                        <h4>Movement:</h4>\n                        <textarea\n                        name=\"movement\"\n                        label=\"Movement\"\n                        value={workoutData.movement}\n                        onChange={changeHandler} />\n                    </div>\n                    <div>\n                        <div className=\"rounds_reps_weight_div\">\n                            <h4>Rounds:</h4>\n                            <input\n                            name=\"rounds\"\n                            label=\"Rounds\"\n                            value={workoutData.rounds}\n                            onChange={changeHandler} />\n                        </div>\n                        <div>\n                            <h4>Reps:</h4>\n                            <input\n                            name=\"reps\"\n                            label=\"Reps\"\n                            value={workoutData.reps}\n                            onChange={changeHandler} />\n                        </div>\n                        <div>\n                            <h4>Weight:</h4>\n                            <input\n                            name=\"weight\"\n                            label=\"Weight\"\n                            value={workoutData.weight}\n                            onChange={changeHandler} />\n                        </div>\n                        <button\n                        className=\"form_button\" \n                        onClick={postWorkoutData}\n                        in={props.in}>Click me</button>\n                    </div>\n                </form>\n            </div> */}","import React from \"react\";\nimport { useState } from \"react\";\nimport UpdateWorkouts from \"./update-workouts\";\n\nimport \"./workout-data-output.css\";\n\nconst WorkoutOutput = (props) => {\n        const [isUpdateMode, setIsUpdateMode] = useState(false);\n        //Holds the month workout data\n        let loggedSession = [];\n        //generates the new movement objects for the new month and day keys\n        const generateMovementObjects = (props)=> {\n            return {\n                movement:props.movement,\n                rounds: props.rounds,\n                reps:props.reps,\n                weight:props.weight\n            }\n        };\n        const updateHandler = (event) => {\n            let selectedWorkoutToUpdate = event.target.name;\n            console.log(selectedWorkoutToUpdate);\n            if(isUpdateMode){\n                setIsUpdateMode(false);\n            } else {\n                setIsUpdateMode(true);\n                console.log(isUpdateMode);\n            }\n        };\n    \n        //Check to see if month exists\n        const doesMonthExist = (props) => {\n            return loggedSession.find((lsession)=> lsession.month === props.month)\n        };\n    \n        //Check to see if day already existed in month...isMonthFound comes from the session.map() on bottom\n        const doesDayExist = (isMonthFound, props) => {\n            return isMonthFound.days.find((monthDays)=> monthDays.day === props.day)\n        };\n    \n        //Helper method to generate activities based on day\n        const generateDaySession = (props) => {\n            return {\n                day: props.day,\n                activities:[generateMovementObjects(props)]\n            }\n        }\n    \n        //map through the incoming data\n        props.workoutItems.map((sessions)=>{\n            let isMonthFound = doesMonthExist(sessions);\n            if(isMonthFound){\n                let isDayFound = doesDayExist(isMonthFound, sessions);\n                if(isDayFound){\n                    isDayFound.activities.push(generateMovementObjects(sessions))\n                } else {\n                    isMonthFound.days.push(generateDaySession(sessions))\n                }\n            } else {\n                loggedSession.push({\n                    month:sessions.month,\n                    days:[generateDaySession(sessions)]\n                })\n            }\n        })\n        loggedSession.map(session=>{\n            console.log(session);\n        })\n\n        return (\n            <div className=\"workout_wrapper\">\n                {loggedSession.map(session => {\n                    const month = session.month;\n                    const day = session.days;\n                    const foundDay = day.map(fDay => fDay.day);\n                    return (\n                        <div className=\"workout_container\">\n                            <h2 className=\"workout_date_header\">{month} {foundDay}</h2>\n                            {day.map(fDay => {\n                                const foundActivities = fDay.activities;\n                                return (\n                                    <div className=\"session_container\">\n                                        {foundActivities.map(workouts =>{\n                                            return(\n                                                <div>\n                                                {isUpdateMode ? <UpdateWorkouts isUpdateMode={setIsUpdateMode} workoutitems={workouts} /> :\n                                                <React.Fragment>\n                                                <div className=\"movement_data\">\n                                                    <p>Movement: {workouts.movement}</p>\n                                                    <p>Rounds: {workouts.rounds}</p>\n                                                    <p>Reps: {workouts.reps}</p>\n                                                    <p>Weight: {workouts.weight}</p>\n                                                </div>\n                                                <div className=\"button_container_update_workout\">\n                                                    <button\n                                                    name={workouts.day}\n                                                    onClick={updateHandler} \n                                                    className=\"form_button\" >Update</button>\n                                                </div>\n                                                </React.Fragment>}\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n};\n\n                            // <div className=\"all_workouts_session_container\">\n                            //         <h2>{foundDay}</h2>\n                            //         {foundActivities.map(workouts =>{\n                            //             return(\n                            //                 <div className=\"movement_data\">\n                            //                 {isUpdateMode && selectedWorkoutToUpdate === workouts.day  ? <UpdateWorkouts\n                            //                 isUpdateMode={setIsUpdateMode}\n                            //                 workoutitems={workouts} /> :\n                            //                 <React.Fragment>\n                            //                     <div className=\"movement_header_box\">\n                            //                         <p>Movement: {workouts.movement}</p>\n                            //                     </div>\n                            //                     <div className=\"movement_description_box\">\n                            //                         <p>Rounds: {workouts.rounds}</p>\n                            //                         <p>Reps: {workouts.reps}</p>\n                            //                         <p>Weight: {workouts.weight}</p>\n                            //                     </div> \n                            //                     <div className=\"button_container_update_workout\">\n                            //                         <button\n                            //                         name={workouts.day}\n                            //                         onClick={updateHandler} \n                            //                         className=\"form_button\" >Edit</button>\n                            //                     </div>\n                            //                     </React.Fragment>   \n                            //                     }\n                            //                 </div> \n                            //             )\n                            //         })}\n                            //     </div>\n\nexport default WorkoutOutput;\n","import React ,{ useState, useEffect } from \"react\";\nimport WorkoutForm from \"../../dashboard/components/workout-form\";\nimport WorkoutOutput from \"../../dashboard/components/workout-data-output\";\n\nimport \"./workout-tracker.css\";\n\n\nconst Workout = (props) =>{\n    const [workoutData, setWorkoutData] = useState([]);\n    const [trainingDay, setTrainingDay] = useState({\n        movement: \"\",\n        rounds: \"\",\n        reps: \"\",\n        weight: \"\"\n    });\n    const [sessionForDayIsLoaded, setSessionForDayIsLoaded] = useState(false);\n    const addWorkout = (newWorkoutData)=>{\n        setWorkoutData((prevWorkoutData)=>{\n            return[...prevWorkoutData, newWorkoutData]\n        });\n    }\n\n    useEffect(()=> {\n        const checkIfWorkoutDataEntered = () =>{\n            if(workoutData.length > 0){\n                setSessionForDayIsLoaded(true)\n            }\n        }\n        checkIfWorkoutDataEntered();\n    },[workoutData]);\n\n    if(!sessionForDayIsLoaded){\n        return(\n            <React.Fragment>\n            <div className=\"workout_page_container\">\n                <WorkoutForm workoutItems={addWorkout} />\n                <div className=\"center\">\n                    <h2>No workout data on the day yet</h2>\n                </div>\n            </div>\n            </React.Fragment>\n        )\n    };\n\n    if(sessionForDayIsLoaded){\n        return(\n            <React.Fragment>\n            <div className=\"workout_page_container\">\n                <WorkoutForm workoutItems={addWorkout} />\n                <WorkoutOutput  workoutItems={workoutData} />\n            </div>\n            </React.Fragment>\n        )\n    }\n};\n\n\nexport default Workout;\n","import React from \"react\";\nimport HomePage from \"./home/pages/HomePage\";\nimport Dashboard from './dashboard/components/dashboard';\nimport UpdateMacros from \"./dashboard/components/update-macros\";\nimport GetMacros from \"./dashboard/components/get-macros\";\nimport GetAllWorkoutData from \"./dashboard/components/get-all-workouts\";\nimport TestWorkoutArea from \"./dashboard/components/get-all-workouts-testarea\";\nimport WorkoutForm from \"./dashboard/components/workout-form\";\nimport Workout from \"./home/pages/workout-tracker\";\nimport { \n    BrowserRouter as Router, \n    Route,\n    Routes, \n    Redirect, \n    Switch,\n    useLocation \n    } from \"react-router-dom\";\nimport { AnimatePresence } from 'framer-motion/dist/framer-motion';\n\n\n\n    const AnimatedRoutes = () => {\n        const location = useLocation();\n        return(\n            <AnimatePresence>\n                <Routes location={location} key={location.pathname}>\n                        <Route path=\"/\" element={<HomePage />} />\n                        <Route path=\"/dashboard\" element={<Dashboard />} />\n                        <Route path=\"/workoutlog\" element={<Workout />} />\n                        <Route path=\"/workoutview\" element={<GetAllWorkoutData />} />\n                        <Route path=\"/workouttest\" element={<TestWorkoutArea />} />\n                        <Route path=\"/dashboard/:mid\" element={<UpdateMacros />} />\n                        <Route path=\"/macrosgraph\" element={<GetMacros />} />\n                </Routes>\n            </AnimatePresence>\n        )\n    }\n\n    export default AnimatedRoutes;","const footerInfo = [\n    {\n        name: \"Jason Ollada\",\n        copyright: \"2022\",\n        tech: \"MongoDB Express React Node.js\",\n    }\n];\nexport default footerInfo;\n\n\n","import React from \"react\";\nimport { FaReact } from \"react-icons/fa\";\n\nimport \"./footer-card.css\";\n\nconst FooterCard = (props) => {\n    return(\n        <div>\n            <p className=\"footer_text_style\">Site designed by {props.name}</p>\n            <p className=\"footer_text_style\">copyright {props.copyright}</p>\n            <p className=\"footer_text_style\">Site designed with {props.tech}</p>\n            <p><FaReact /></p>\n            \n        </div>\n    )\n};\n\nexport default FooterCard;","import React from \"react\";\nimport footerInfo from \"./footer-info\";\nimport FooterCard from \"./footer-card\";\n\nimport \"./footer.css\";\n\nconst createFooter = (footerInfo) => {\n    return(\n        <FooterCard\n        name={footerInfo.name}\n        copyright={footerInfo.copyright}\n        tech={footerInfo.tech} />\n    )\n};\n\nconst Footer = () => {\n    return(\n        <div className=\"center\">\n            {footerInfo.map(createFooter)}\n        </div>\n    )\n};\n\nexport default Footer;","import React from \"react\";\nimport { \n    BrowserRouter as Router, \n    Route,\n    Routes, \n    Redirect, \n    Switch \n    } from \"react-router-dom\";\nimport MainNav from './shared/components/navigation/MainNav';\nimport HomePage from './home/pages/HomePage';\nimport Dashboard from './dashboard/components/dashboard';\nimport DashboardOutput from \"./dashboard/components/dashboard-output\";\nimport UpdateMacros from \"./dashboard/components/update-macros\";\nimport GetMacros from \"./dashboard/components/get-macros\";\nimport AnimatedRoutes from \"./AnimatedRoutes\";\nimport Footer from './shared/footer/footer';\n\nconst MainLayoutRoutes = () => {\n    return(\n        <React.Fragment>\n            <nav>\n                <MainNav />\n            </nav>\n            <AnimatedRoutes />\n            <footer>\n                <Footer />\n            </footer>\n        </React.Fragment>\n    )\n};\n\nexport default MainLayoutRoutes;","import React, { Fragment } from 'react';\nimport { \n  BrowserRouter as Router,\n  HashRouter, \n  Route,\n  Routes, \n  Redirect, \n  Switch \n  } from \"react-router-dom\";\nimport MainLayoutRoutes from './MainLayoutRoutes';\n\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Routes basename=\"/\">\n        <Route path=\"*\" element={<MainLayoutRoutes />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/barbellfactor.ec8a2bad.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/profilepic.c2e00923.jpeg\";"],"sourceRoot":""}